<!DOCTYPE html>
<html>

<head>
  <meta name="viewport" 
        content="width=device-width, 
        initial-scale=1.0, 
        user-scalable=no" />
  <title>주부공파23</title>
  <style>
    #container, canvas{
      background-color: #333;
      display: flex;
      align-items: center;
      justify-content: center;
      overflow: hidden;
      border-radius: 7px;
      touch-action: none;
    }
		canvas{
			background-color: rgb(247, 239, 200);
			overflow: scroll;
		}
		.controller{
			position: fixed;
			top: 10px;
		}
		.hidden{display: none;}
  </style>
</head>

<body>

  <div style="display:flex;">
		<canvas></canvas>
		
  </div>
	<button type="button" class="command-get-data hidden">Get Data</button>
  <button type="button" class="command-get-file">이미지로 저장</button>
	<div class="controller">
		<button type="button" class="command-zoom-in">Zoom In</button>
		<button type="button" class="command-zoom-out">Zoom Out</button>
		<button type="button" class="command-focus-player" id="황곡성">황곡성</button>
		<button type="button" class="command-focus-player" id="황치순">황치순</button>
		<button type="button" class="command-focus-player" id="황치열">황치열</button>
		<button type="button" class="command-focus-player" id="황치명">황치명</button>
		<button type="button" class="command-focus-player" id="황치형">황치형</button>
		<button type="button" class="command-focus-player" id="황치서">황치서</button>
		<button type="button" class="command-focus-player" id="황치우">황치우</button>
	</div>
	
	<script src="/component/test/player.js"></script>
	<script src="/assets/test/data.js" type="text/javascript"></script>
  <script>
		document.addEventListener('DOMContentLoaded', function () {
			document.addEventListener('click', handleClick);
	
			function handleClick(e) 
			{
				//e.preventDefault();
				e.composedPath().find((node)=>{
					if(node.nodeName === 'svg' || node.nodeName === 'path') return false;
					if(typeof(node.className) === 'object' || !node.className || !node.className?.match(/command/)) return false;
					if(node.className.match(/command-get-data/))
					{
						const userData = [];
						users.forEach(user => {
							userData.push(user.getData());
						})
					}
          if(node.className.match(/command-get-file/))
					{
						const image = canvas.toDataURL();
            const link = document.createElement("a");
            link.href = image;
            link.download = "MyFamilyTree.png";
            link.click();
            return;
					}
					if(node.className.match(/command-add-player/))
					{
						const form = document.querySelector('form');
						const data = form.querySelector('textarea').value;
						const userData = JSON.parse(data);
						const user = new Player(userData);
						users.push(user);
						const parent = users.find((u)=>u.name === user.parent);
						if(parent) user.setParent(parent);
						draw(true);
					}
					if(node.className.match(/command-zoom-in/))
					{
						if(scale < 0.5) return;
						zoomCanvas("in")
						draw(true);
						 
					}
					if(node.className.match(/command-zoom-out/))
					{
						if(scale > 1.5) return;
						zoomCanvas("out")
						draw(true);
					}
					if(node.className.match(/command-focus-player/))
					{
						const player = users.find((u)=>u.name === node.id);
						const xPos = 20 - player.xPos
						const yPos = 60 - player.yPos
						users.forEach(user => {
							user.xPos += xPos;
							user.yPos += yPos;
						})
						zoomCanvas("default");
						draw(true);
					}
				});
			}
		});

		const canvas = document.querySelector('canvas')
		const ctx = canvas.getContext('2d');
		const editable = false;
		
		if(editable)
		{
			document.querySelector(".command-get-data").classList.remove("hidden");
		}
		

		let scale = window.devicePixelRatio;

		function zoomCanvas(type="in")
		{
			if(type === "in")
			{
				scale = scale -0.1;
			}
			else if(type === "out")
			{
				scale = scale +0.1;
			}
			else scale = 1;
			ctx.scale(scale, scale);
			canvas.width = canvasWidth * scale;
			canvas.height = canvasHeight * scale;
			return scale;
		}
		
		const canvasWidth = 1024;
		const canvasHeight = 800;
		zoomCanvas(type="default");


		canvas.style.width = canvasWidth + "px";
		canvas.style.height = canvasHeight + "px";

		const canvasBoundRect = canvas.getBoundingClientRect();
		const offsetTop = canvasBoundRect.top;
		const offsetLeft = canvasBoundRect.left;
    
		const datas = JSON.parse(JSON.stringify(familyData));
		const users = [];
		datas.forEach((data)=>{
			const user = new Player(data);
			users.push(user);
		})

		users.forEach((user)=>{
			if(user.parent)
			{
				const parent = users.find((u)=>u.name === user.parent);
				if(parent) user.setParent(parent);
			}
			if(user.partner)
			{
				const partner = users.find((u)=>u.name === user.partner);
				if(partner) user.setPartner(partner);
			}
		})

		let selectUser = null;

		let selectBoard = false;
	  draw(true);
		

		canvas.addEventListener('mousedown', (e)=>eventStart(e))
		canvas.addEventListener('mouseup', (e)=>eventEnd(e))
		canvas.addEventListener('mousemove', (e)=>eventMove(e))

		canvas.addEventListener('touchstart', eventStart, false)
		canvas.addEventListener('touchend', eventEnd, false)
		canvas.addEventListener('touchmove', eventMove, false)

		function eventStart(e)
		{
			if(!editable) {
				selectBoard = true;
				e.target.style.cursor = "grab";
				return;
			}

			selectUser = whichUser(e.clientX - offsetLeft, e.clientY - offsetTop)
			if(!selectUser && e.target.tagName === "CANVAS")
			{
				selectBoard = true;
				e.target.style.cursor = "grab";
				
			}
			else{
				e.target.style.cursor = "move";
			} 
		}

		function eventEnd(e)
		{
			e.target.style.cursor = "default";
			if(selectUser && editable)
			{
				users.forEach(user => user.drawImage());
				selectUser = null;
				return;
			}
			else {
				users.forEach(user => user.drawImage());
				selectBoard = false;
				previousTouch = null;
			}
		}

		var previousTouch;

		function eventMove(e)
		{
			e.preventDefault();
			if(selectUser && editable)
			{
				selectUser.xPos = e.clientX - offsetLeft;
				selectUser.yPos = e.clientY - offsetTop;
				draw(false);
			}
			else if(selectBoard)
			{
				const touch = (e.touches)? e.touches[0] : null;
				let _x = 0;
				let _y = 0;
				if(touch)
				{
					if (previousTouch) {
						_x = touch.pageX - previousTouch.pageX;
						_y = touch.pageY - previousTouch.pageY;
					}
					previousTouch = touch;
				}
				else
				{
					_x = e.movementX;
					_y = e.movementY;
				}
				users.forEach(user => {
					user.xPos += _x;
					user.yPos += _y;
				})
				
				//console.log("movementX", e.touches[0]?.clientX)
				draw(false);
			}
		}

		

		function draw(init) {
			ctx.clearRect(0, 0, canvas.width, canvas.height);
			users.forEach(user => {
				user.drawPlayerRect();
				user.drawPlayerText();
				user.drawLine();
				user.drawMarryLine();
				if(init) user.drawImage();
				
			});
			drawTitle()
		}

		function whichUser(x, y)
		{
			for(let i=0; i<users.length; i++)
			{
				if(users[i].xPos < x && x < users[i].xPos+users[i].width)
				{
					if(users[i].yPos < y && y < users[i].yPos+users[i].height)
					{
						return users[i];
					}
				}
			}
			return null;
		}

		function drawTitle(){
			ctx.font = "24px Arial";
			ctx.fillStyle = "black";
			ctx.fillText("창원 황씨 현령공주부공파", 740, 35);
	}
	
  </script>
</body>

</html>